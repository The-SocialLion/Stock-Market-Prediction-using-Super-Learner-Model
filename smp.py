# -*- coding: utf-8 -*-
"""SMP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdrV9DuzvT-obDOgJ9jXjpXNcodZqER0

#**Stock Market Prediction**
"""

import sys

# Choose your ticker
tickerSymbol = "AAPL" # AAPL:Apple Stocks

# Choose date range - format should be 'YYYY-MM-DD' 
startDate = '2020-01-01' 
endDate = '2021-06-10'

pip install yfinance

pip install ta

pip install fastai

pip install plotly

import yfinance as yf
import pandas as pd 
import numpy as np
from ta import add_all_ta_features # Library that does financial technical analysis 
import fastai.tabular # Library that does date factors
import plotly.graph_objs as go  # Import the graph ojbects

tickerData = yf.Ticker(tickerSymbol)
df = tickerData.history(start = startDate, end = endDate)

df

date_change = '%Y-%m-%d'
df['Date'] = df.index
df['Date'] = pd.to_datetime(df['Date'], format = date_change)
Dates = df['Date']

df = add_all_ta_features(df, "Open", "High", "Low", "Close", "Volume", fillna=True) 

print(df.columns)

# Define the date parts 
fastai.tabular.add_datepart(df,'Date', drop = 'True')

# Ensure the correct format
df['Date'] = pd.to_datetime(df.index.values, format = date_change)

# Add the date parts
fastai.tabular.add_cyclic_datepart(df, 'Date', drop = 'True')

# Define key model parameters

# Set days out to predict 
shifts = [1,5,10]

# Set a training percentage
train_pct = .75

# Plotting dimensions
w = 25 # width
h = 25 # height

# Ensure column types are correct

def CorrectColumnTypes(df):
  # Input: dataframe 
  # ouptut: dataframe (with column types changed)

  # Numbers
  for col in df.columns[1:80]:
      df[col] = df[col].astype('float')

  for col in df.columns[-10:]:
      df[col] = df[col].astype('float')

  # Categories 
  for col in df.columns[80:-10]:
      df[col] = df[col].astype('category')

  return df

# Create the lags 
def CreateLags(df,lag_size):
  # inputs: dataframe , size of the lag (int)
  # ouptut: dataframe ( with extra lag column), shift size (int)

  # add lag
  shiftdays = lag_size
  shift = -shiftdays
  df['Close_lag'] = df['Close'].shift(shift)
  return df, shift

df

"""#**Splitting Dataset**"""

def SplitData(df, train_pct, shift):
  # inputs: dataframe , training_pct (float between 0 and 1), size of the lag (int)
  # ouptut: x train dataframe, y train data frame, x test dataframe, y test dataframe, train data frame, test dataframe

  train_pt = int(len(df)*train_pct)
  
  train = df.iloc[:train_pt,:]
  test = df.iloc[train_pt:,:]
  
  x_train = train.iloc[:shift,1:-1]
  y_train = train['Close_lag'][:shift]
  x_test = test.iloc[:shift,1:-1]
  y_test = test['Close'][:shift]

  return x_train, y_train, x_test, y_test, train, test

from sklearn.metrics import mean_squared_error # Install error metrics 
from sklearn.linear_model import LinearRegression 
from sklearn.neural_network import MLPRegressor  
from sklearn.preprocessing import StandardScaler # to scale for ann
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import BaggingRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import ExtraTreesRegressor

"""#**Plotting Results**"""

# Function to make the plots
def PlotModelResults_Plotly(train, test, pred, ticker, w, h, shift_days,name):
  # inputs: train dataframe, test dataframe, predicted value (list), ticker ('string'), width (int), height (int), shift size (int), name (string)
  # output: None

  # Create lines of the training actual, testing actual, prediction 
  D1 = go.Scatter(x=train.index,y=train['Close'],name = 'Train Actual') # Training actuals
  D2 = go.Scatter(x=test.index[:shift],y=test['Close'],name = 'Test Actual') # Testing actuals
  D3 = go.Scatter(x=test.index[:shift],y=pred,name = 'Model Prediction') # Testing predction

  # Combine in an object  
  line = {'data': [D1,D2,D3],
          'layout': {
              'xaxis' :{'title': 'Date'},
              'yaxis' :{'title': '$'},
              'title' : name + ' - ' + tickerSymbol + ' - ' + str(shift_days)
          }}
  # Send object to a figure 
  fig = go.Figure(line)

  # Show figure
  fig.show()

"""#**Regression Models**"""

# Regreesion Function

def LinearRegression_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  lr = LinearRegression()
  lr.fit(x_train,y_train)
  lr_pred = lr.predict(x_test)
  lr_MSE = mean_squared_error(y_test, lr_pred)
  lr_R2 = lr.score(x_test, y_test)
  print('Linear Regression R2: {}'.format(lr_R2))
  print('Linear Regression MSE: {}'.format(lr_MSE))

  return lr_pred

# ANN Function 

def ANN_func(x_train,y_train, x_test, y_test):

  # Scaling data
  scaler = StandardScaler()
  scaler.fit(x_train)
  x_train_scaled = scaler.transform(x_train)
  x_test_scaled = scaler.transform(x_test)


  MLP = MLPRegressor(random_state=1, max_iter=1000, hidden_layer_sizes = (100,), activation = 'identity',learning_rate = 'adaptive').fit(x_train_scaled, y_train)
  MLP_pred = MLP.predict(x_test_scaled)
  MLP_MSE = mean_squared_error(y_test, MLP_pred)
  MLP_R2 = MLP.score(x_test_scaled, y_test)

  print('Muli-layer Perceptron R2 Test: {}'.format(MLP_R2))
  print('Multi-layer Perceptron MSE: {}'.format(MLP_MSE))

  return MLP_pred

def KNearestRegression_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  knr = KNeighborsRegressor()
  knr.fit(x_train,y_train)
  knr_pred = knr.predict(x_test)
  knr_MSE = mean_squared_error(y_test, knr_pred)
  knr_R2 = knr.score(x_test, y_test)
  print('K-Nearest Regression R2: {}'.format(knr_R2))
  print('K-Nearest Regression MSE: {}'.format(knr_MSE))

  return knr_pred

def DecisionTreeRegression_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  dtr = DecisionTreeRegressor()
  dtr.fit(x_train,y_train)
  dtr_pred = dtr.predict(x_test)
  dtr_MSE = mean_squared_error(y_test, dtr_pred)
  dtr_R2 = dtr.score(x_test, y_test)
  print('DecisionTree Regression R2: {}'.format(dtr_R2))
  print('DecisionTree  Regression MSE: {}'.format(dtr_MSE))

  return dtr_pred

def SupportVectorRegression_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  svr = SVR()
  svr.fit(x_train,y_train)
  svr_pred = svr.predict(x_test)
  svr_MSE = mean_squared_error(y_test, svr_pred)
  svr_R2 = svr.score(x_test, y_test)
  print('SupportVector Regression R2: {}'.format(svr_R2))
  print('SupportVector Regression MSE: {}'.format(svr_MSE))

  return svr_pred

def AdaBoostRegressor_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  abr = AdaBoostRegressor()
  abr.fit(x_train,y_train)
  abr_pred = abr.predict(x_test)
  abr_MSE = mean_squared_error(y_test, abr_pred)
  abr_R2 = abr.score(x_test, y_test)
  print('AdaBoostRegression R2: {}'.format(abr_R2))
  print('AdaBoostRegression MSE: {}'.format(abr_MSE))

  return abr_pred

def BaggingRegressor_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  br = BaggingRegressor()
  br.fit(x_train,y_train)
  br_pred = br.predict(x_test)
  br_MSE = mean_squared_error(y_test, br_pred)
  br_R2 = br.score(x_test, y_test)
  print('Bagging Regression R2: {}'.format(br_R2))
  print('Bagging Regression MSE: {}'.format(br_MSE))

  return br_pred

def RandomForestRegressor_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  rfr = RandomForestRegressor()
  rfr.fit(x_train,y_train)
  rfr_pred = rfr.predict(x_test)
  rfr_MSE = mean_squared_error(y_test, rfr_pred)
  rfr_R2 = rfr.score(x_test, y_test)
  print('RandomForest Regression R2: {}'.format(rfr_R2))
  print('RandomForest Regression MSE: {}'.format(rfr_MSE))

  return rfr_pred

def ExtraTreesRegressor_fnc(x_train,y_train, x_test, y_test):
  #inputs: x train data, y train data, x test data, y test data (all dataframe's)
  # output: the predicted values for the test data (list)
  
  etr = ExtraTreesRegressor()
  etr.fit(x_train,y_train)
  etr_pred = etr.predict(x_test)
  etr_MSE = mean_squared_error(y_test, etr_pred)
  etr_R2 = etr.score(x_test, y_test)
  print('ExtraTrees Regression R2: {}'.format(etr_R2))
  print('ExtraTrees Regression MSE: {}'.format(etr_MSE))

  return etr_pred

"""#**Calculation of Profit**"""

def CalcProfit(test_df,pred,j):
  pd.set_option('mode.chained_assignment', None)
  test_df['pred'] = np.nan
  test_df['pred'].iloc[:-j] = pred
  test_df['change'] = test_df['Close_lag'] - test_df['Close'] 
  test_df['change_pred'] = test_df['pred'] - test_df['Close'] 
  test_df['MadeMoney'] = np.where(test_df['change_pred']/test_df['change'] > 0, 1, -1) 
  test_df['profit'] = np.abs(test['change']) * test_df['MadeMoney']
  profit_dollars = test['profit'].sum()
  print('Would have made: $ ' + str(round(profit_dollars,1)))
  profit_days = len(test_df[test_df['MadeMoney'] == 1])
  print('Percentage of good trading days: ' + str( round(profit_days/(len(test_df)-j),2))     )

  return test_df, profit_dollars

"""#**Regression Models Prediction:Stock Prediction**"""

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # Linear Regression
  print("Linear Regression")
  lr_pred = LinearRegression_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,lr_pred,j)
  PlotModelResults_Plotly(train, test, lr_pred, tickerSymbol, w, h, j, 'Linear Regression')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # Artificial Neuarl Network 
  print("ANN")
  MLP_pred = ANN_func(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,MLP_pred,j)
  PlotModelResults_Plotly(train, test, MLP_pred, tickerSymbol, w, h, j, 'ANN')
  print('------------')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # K-Nearest Regression
  print("K-Nearest Regression")
  knr_pred =KNearestRegression_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,knr_pred,j)
  PlotModelResults_Plotly(train, test, knr_pred, tickerSymbol, w, h, j, ' K-Nearest Regression')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  #DecisionTree Regression
  print("DecisionTree Regression")
  dtr_pred = dtr = DecisionTreeRegression_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,dtr_pred,j)
  PlotModelResults_Plotly(train, test, dtr_pred, tickerSymbol, w, h, j, 'DecisionTree Regression')
  print('------------')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # Support Vector Regression
  print("Support Vector Regression")
  svr_pred = SupportVectorRegression_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,svr_pred,j)
  PlotModelResults_Plotly(train, test, svr_pred, tickerSymbol, w, h, j, 'Support Vector  Regression')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # AdaBoostRegression
  print("AdaBoostRegression ")
  abr_pred = AdaBoostRegressor_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,abr_pred,j)
  PlotModelResults_Plotly(train, test, abr_pred, tickerSymbol, w, h, j, 'AdaBoostRegression')
  print('------------')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)
  # Bagging Regression
  print("Bagging Regression")
  br_pred = BaggingRegressor_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,br_pred,j)
  PlotModelResults_Plotly(train, test, br_pred, tickerSymbol, w, h, j, 'Bagging Regression')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)

  # Random Forest Regression
  print("RandomForest Regression ")
  rfr_pred = RandomForestRegressor_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,rfr_pred,j)
  PlotModelResults_Plotly(train, test, rfr_pred, tickerSymbol, w, h, j, 'RandomForest Regression')
  print('------------')

for j in shifts: 
  print(str(j) + ' days out:')
  print('------------')
  df_lag, shift = CreateLags(df,j)
  df_lag = CorrectColumnTypes(df_lag)
  x_train, y_train, x_test, y_test, train, test = SplitData(df, train_pct, shift)
  
  # ExtraTrees Regression
  print("ExtraTrees Regression")
  etr_pred = ExtraTreesRegressor_fnc(x_train,y_train, x_test, y_test)
  test2, profit_dollars = CalcProfit(test,etr_pred,j)
  PlotModelResults_Plotly(train, test, etr_pred, tickerSymbol, w, h, j, 'ExtraTrees Regression')
  print('------------')